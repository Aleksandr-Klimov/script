#/bin/bash

if [ -e mark ] #исключение мультизапуска
        then
        echo "скрипт выполнился с ошибкой или продолжает выполняться"
        else
        k=`cat long` # сравнивание ip начинается с этой строки
        echo "$k считывание номера последней строки"
        touch mark #создаём файл-флаг
        tail -n +$k access-4560-644067.log > m.log # считываем исходный файл с $k строки
        array=( `cat m.log | egrep -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"` )
        m=0 #кол-во строк/элементов
        n=0 #кол-во обращений с одного ip
        touch ip # создаём файл с несовпадающими ip
        touch mas # массив кол-ва совпадений
        kol=(0 0 0 0 0) # массив наибольших совпадений
        ip_add=(0.0.0.0 1.1.1.1 2.2.2.2 3.3.3.3 4.4.4.4) # массив ip адресов с соответвующий массиву "kol"
        for i in "${array[@]}"
        do
                n=0 # обнуление кол-ва совпадений
                qwer=( `cat ip | egrep -o "$i"` )
                e=$p # сдвиг начала шага второго массива относительно перемещения первого массива
                if [ "$qwer" != "$i" ] #проверка на то, что этот ip уже посчитан
                then
                        for j in "${array[@]}"
                                do
                                if [ $i == "${array[$e]}" ]
                                        then
                                        let "n = n + 1"
                                fi
                                let "e = e + 1" # шаг второго массива
                                done
                echo "$i" >> ip
                echo "$n" >> mas
                fi
#               let "p = p + 1" # шаг первого массива


                c=0 # шаш первого массива сравнения
                z=0 # сдвиг шага второго массива сравнения относительно перемещения первого массива
                if [ $n -gt ${kol[0]} ]
                        then
                        z=$c
                        kol[0]=$n
                        ip_add[0]=$i
                        for a in "${kol[@]}"
                                do
                                z=$c # начало шага второго массива с приравниванием к началу второго шага
                                for (( b=$c;b<${#kol[@]};b++ ))
                                        do
                                        if [ "${kol[$c]}" -gt "${kol[$z]}" ] #сравниваем и меняем местами значения совпадений
                                                then
                                                x=${kol[c]} # временная переменная для замены
                                                kol[c]=${kol[z]}
                                                kol[z]=$x
                                                l=${ip_add[c]} # временная переменная для замены ip
                                                ip_add[c]=${ip_add[z]}
                                                ip_add[z]=$l
                                        fi
                                        let "z = z + 1"
                                        done
                        let "c = c + 1" # шаг первого массива сравнения
                        done
                fi
                let "p = p + 1" # шаг первого массива
        done
        x=0
        for i in ${kol[@]}
                do
                echo " ${ip_add[x]} посылал запросы ${kol[x]} раз " >> 1
                #тут уже веб хуками выкинуть информацию можно, например в слак(/slack ......)
                let "x = x + 1"
        done

        rm ip # удаляем файл с несовпадающими ip
        rm mas # удаляем файл с кол-вом совпадений
        m="${#array[*]}" # считываем длинну нашего массива
        let "m = m + k" # складывая старое номе последней строки и значение длинны массива получаем полную длинну
        echo "$m записываем как номер последней строчки"
        echo "$m" > long # перезаписываем в файл размер файла при последней проверке
        rm mark #удаляем файл-флаг
        rm m.log #удаляем временный файл
fi
